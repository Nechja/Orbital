name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0) - leave empty to use branch name'
        required: false
        type: string
      create_release:
        description: 'Create a new release (vs updating existing)'
        required: true
        type: boolean
        default: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: OrbitalDocking

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            artifact: OrbitalDocking-linux-x64
          - os: ubuntu-latest
            rid: linux-arm64
            artifact: OrbitalDocking-linux-arm64
          - os: windows-latest
            rid: win-x64
            artifact: OrbitalDocking-win-x64
          - os: macos-latest
            rid: osx-x64
            artifact: OrbitalDocking-osx-x64
          - os: macos-latest
            rid: osx-arm64
            artifact: OrbitalDocking-osx-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Publish Self-Contained Single File
      run: dotnet publish -c Release -r ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true -p:PublishTrimmed=true -p:TrimMode=partial -o ./publish

    - name: Prepare artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd publish
        chmod +x ${{ env.PROJECT_NAME }}
        tar -czf ../${{ matrix.artifact }}.tar.gz *
        cd ..

    - name: Sign Windows executable
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
      run: |
        # Check if certificate is available
        if (-not "${{ secrets.WINDOWS_CERTIFICATE }}") {
          Write-Host "No certificate configured, skipping signing"
          exit 0
        }
        
        # Decode certificate from base64 secret
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.WINDOWS_CERTIFICATE }}")
        $certPath = Join-Path $env:TEMP "codesign_cert.pfx"
        [System.IO.File]::WriteAllBytes($certPath, $certBytes)
        
        try {
          # Find signtool.exe
          $signtoolPaths = @(
            "${env:ProgramFiles(x86)}\Windows Kits\10\bin\*\x64\signtool.exe",
            "${env:ProgramFiles}\Windows Kits\10\bin\*\x64\signtool.exe",
            "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\*\Bin\signtool.exe"
          )
          
          $signtool = $null
          foreach ($path in $signtoolPaths) {
            $found = Get-ChildItem -Path $path -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              $signtool = $found.FullName
              break
            }
          }
          
          if (-not $signtool) {
            throw "signtool.exe not found. Please ensure Windows SDK is installed."
          }
          
          Write-Host "Using signtool: $signtool"
          
          # Sign the executable with SHA256
          & $signtool sign `
            /f $certPath `
            /p $env:CERT_PASSWORD `
            /tr http://timestamp.digicert.com `
            /td SHA256 `
            /fd SHA256 `
            /v `
            "publish\${{ env.PROJECT_NAME }}.exe"
          
          if ($LASTEXITCODE -ne 0) {
            throw "Code signing failed with exit code $LASTEXITCODE"
          }
          
          # Verify signature
          & $signtool verify /pa /v "publish\${{ env.PROJECT_NAME }}.exe"
          
          if ($LASTEXITCODE -ne 0) {
            throw "Signature verification failed"
          }
          
          Write-Host "âœ“ Successfully signed ${{ env.PROJECT_NAME }}.exe"
        }
        finally {
          # Always clean up certificate file
          if (Test-Path $certPath) {
            Remove-Item $certPath -Force
          }
        }

    - name: Prepare artifacts (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path publish/* -DestinationPath ${{ matrix.artifact }}.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          *.tar.gz
          *.zip

  create-deb:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: OrbitalDocking-linux-x64
    
    - name: Extract artifact
      run: |
        tar -xzf OrbitalDocking-linux-x64.tar.gz
        chmod +x OrbitalDocking
    
    - name: Create .deb package structure
      run: |
        # Define package info
        PACKAGE_NAME="orbital"
        VERSION="${GITHUB_REF_NAME#v}"  # Remove 'v' prefix from tag
        VERSION="${VERSION:-1.0.0}"  # Default version if not a tag
        ARCH="amd64"
        
        # Create directory structure
        mkdir -p ${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN
        mkdir -p ${PACKAGE_NAME}_${VERSION}_${ARCH}/usr/bin
        mkdir -p ${PACKAGE_NAME}_${VERSION}_${ARCH}/usr/share/applications
        mkdir -p ${PACKAGE_NAME}_${VERSION}_${ARCH}/usr/share/icons/hicolor/256x256/apps
        
        # Copy files
        cp OrbitalDocking ${PACKAGE_NAME}_${VERSION}_${ARCH}/usr/bin/orbital
        chmod 755 ${PACKAGE_NAME}_${VERSION}_${ARCH}/usr/bin/orbital
        
        # Copy icon if exists
        if [ -f "Assets/orbital.png" ]; then
          cp Assets/orbital.png ${PACKAGE_NAME}_${VERSION}_${ARCH}/usr/share/icons/hicolor/256x256/apps/orbital.png
        fi
        
        # Create control file
        cat > ${PACKAGE_NAME}_${VERSION}_${ARCH}/DEBIAN/control << EOF
        Package: ${PACKAGE_NAME}
        Version: ${VERSION}
        Section: utils
        Priority: optional
        Architecture: ${ARCH}
        Depends: docker.io | docker-ce
        Maintainer: Nechja <nechja@github.com>
        Homepage: https://github.com/Nechja/Orbital
        Description: Docker Desktop alternative
         A free, open-source Docker GUI with no subscriptions
         or corporate restrictions. Just a simple tool to manage
         your containers.
        EOF
        
        # Create desktop file
        cat > ${PACKAGE_NAME}_${VERSION}_${ARCH}/usr/share/applications/orbital.desktop << EOF
        [Desktop Entry]
        Name=Orbital
        GenericName=Docker UI
        Comment=Docker container management tool
        Exec=/usr/bin/orbital
        Icon=orbital
        Terminal=false
        Type=Application
        Categories=Development;
        StartupNotify=true
        EOF
        
        # Build the .deb package
        dpkg-deb --build ${PACKAGE_NAME}_${VERSION}_${ARCH}
        
        # Rename to match artifact naming convention
        mv ${PACKAGE_NAME}_${VERSION}_${ARCH}.deb OrbitalDocking-${VERSION}-linux-amd64.deb
    
    - name: Upload .deb package
      uses: actions/upload-artifact@v4
      with:
        name: OrbitalDocking-deb-package
        path: OrbitalDocking-*.deb

  create-appimage:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux x64 artifact
      uses: actions/download-artifact@v4
      with:
        name: OrbitalDocking-linux-x64

    - name: Extract artifact
      run: |
        tar -xzf OrbitalDocking-linux-x64.tar.gz
        chmod +x OrbitalDocking

    - name: Create AppImage structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Move executable
        mv OrbitalDocking AppDir/usr/bin/
        
        # Copy icon from Assets (if it exists in the tar)
        if [ -f "Assets/orbital.png" ]; then
          # Copy to AppDir root (required by appimagetool)
          cp Assets/orbital.png AppDir/orbital-docking.png
          # Also copy to standard location
          cp Assets/orbital.png AppDir/usr/share/icons/hicolor/256x256/apps/orbital-docking.png
        else
          # Create a placeholder if icon isn't included
          touch AppDir/orbital-docking.png
          touch AppDir/usr/share/icons/hicolor/256x256/apps/orbital-docking.png
        fi
        
        # Create desktop file in AppDir root (required by appimagetool)
        cat > AppDir/orbital-docking.desktop << 'EOF'
        [Desktop Entry]
        Name=Orbital Docking
        Exec=OrbitalDocking
        Icon=orbital-docking
        Type=Application
        Categories=Development;
        Comment=Docker container management tool
        Terminal=false
        EOF
        
        # Also copy to standard location
        cp AppDir/orbital-docking.desktop AppDir/usr/share/applications/
        
        # Create AppRun script
        cat > AppDir/AppRun << 'EOF'
        #!/bin/sh
        SELF=$(readlink -f "$0")
        HERE=${SELF%/*}
        export PATH="${HERE}/usr/bin:${PATH}"
        exec "${HERE}/usr/bin/OrbitalDocking" "$@"
        EOF
        chmod +x AppDir/AppRun

    - name: Create AppImage
      run: |
        # Install FUSE for AppImage
        sudo apt-get update
        sudo apt-get install -y libfuse2
        
        # Download and run AppImage tool
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        ./appimagetool-x86_64.AppImage AppDir OrbitalDocking-x86_64.AppImage

    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: OrbitalDocking-AppImage
        path: OrbitalDocking-x86_64.AppImage

  release:
    needs: [build, create-deb, create-appimage]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Determine Release Tag
      id: get_tag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF_NAME}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          fi
        else
          echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        fi

    - name: Create or Update Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.tag }}
        artifacts: |
          ./artifacts/OrbitalDocking-linux-x64/*.tar.gz
          ./artifacts/OrbitalDocking-linux-arm64/*.tar.gz
          ./artifacts/OrbitalDocking-win-x64/*.zip
          ./artifacts/OrbitalDocking-osx-x64/*.tar.gz
          ./artifacts/OrbitalDocking-osx-arm64/*.tar.gz
          ./artifacts/OrbitalDocking-deb-package/*.deb
          ./artifacts/OrbitalDocking-AppImage/*.AppImage
        generateReleaseNotes: true
        draft: false
        allowUpdates: true
        prerelease: ${{ contains(steps.get_tag.outputs.tag, 'beta') || contains(steps.get_tag.outputs.tag, 'alpha') || contains(steps.get_tag.outputs.tag, 'dev') }}
        makeLatest: ${{ !contains(steps.get_tag.outputs.tag, 'beta') && !contains(steps.get_tag.outputs.tag, 'alpha') && !contains(steps.get_tag.outputs.tag, 'dev') }}
        body: |
          ## Installation

          ### Linux
          **AppImage (Recommended)**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/OrbitalDocking-x86_64.AppImage
          chmod +x OrbitalDocking-x86_64.AppImage
          ./OrbitalDocking-x86_64.AppImage
          ```

          **Self-contained binary**
          ```bash
          # x64
          tar -xzf OrbitalDocking-linux-x64.tar.gz
          chmod +x OrbitalDocking
          ./OrbitalDocking

          # ARM64
          tar -xzf OrbitalDocking-linux-arm64.tar.gz
          chmod +x OrbitalDocking
          ./OrbitalDocking
          ```

          ### Windows
          Extract `OrbitalDocking-win-x64.zip` and run `OrbitalDocking.exe`

          ### macOS
          ```bash
          # Intel
          tar -xzf OrbitalDocking-osx-x64.tar.gz
          chmod +x OrbitalDocking
          ./OrbitalDocking

          # Apple Silicon
          tar -xzf OrbitalDocking-osx-arm64.tar.gz
          chmod +x OrbitalDocking
          ./OrbitalDocking
          ```

          ## Requirements
          - Docker must be installed and running
          - Linux users may need to be in the `docker` group